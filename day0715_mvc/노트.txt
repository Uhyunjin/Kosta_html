<< jsp문장 구성 요소 >>

<%  %>		스크립트릿		온갖자바문법을 쓸 수 있어요.
<%= %>		표현식		변수의 내용을 출력

=====================================================================

MVC 패턴
	==> 전통적인 java기반의 웹 기술인 jsp는
	하나의 jsp문서에 
	사용자의 요청
	요청에 따른 처리
	그리 결과를 보여주기 위한 view를 
	하나의 jsp에서 모두 처리 하게 됩니다.
	
	이것은 웹 초기에는 
	jsp문서 안에서 
	html과 자바문법을 같이 쓸 수 있어서 
	장점이었으나 
	
	그러나 현대의 웹환경에서는
	사용자 요구가 복잡해지고
	프로젝트 규모거 커짐에 따라 
	또, 협업과 유지보수 하기에는 어려움이 있어요.
	
	그래서 현대의 웹환경에서는 
	하나의 jsp안에서 
	모든 처리
		사용자의 요청 파악
		그 요청에 따른 일처리
		그리고 결과를 보여주기 위한 view의 역할 
		
	하지않고 별도의 역할분담을 하기를 권장합니다.
	
	사용자의 요청파악은 "Controller"가 하고 
	그 요청에 따른 일처리는 "Model"이 담당하고 
	일처리된 결과 보여주기 역할은 "View"가 하도록 합니다.
	
	이러한 방식을 "MVC" 패턴이라고 합니다. 
	
	M(Model) 은 사용자의 요청에 따른 일처리를 위한 모든 자바 클래스들을 말합니다.
	V(View) 는 사용자의 요청에 따른 처리된 결과를 보여주기 역할을 JSP를 말합니다.
	C(Controller) 는 사용자의 요청을 파악하여 해당 Model에게 일처리를 맡기고 그 처리된 결과에 따라서 
		적합한 View를 연결시켜주는 담당을 합니다. 컨트롤러의 역할을 jsp로도 만들 수 있지만 
		일반적으로는 서블릿으로 만듭니다. 

--------------------------------------------------------------------------------------------------
listCustmer.jsp


Model
DBConnectionProvider.java
CustomerVO.java
CustomerDAO.java

Controller
ListCustomer.java   <---  listCustomer.do

View
listCusotmer.jsp

----------------------------------------------------------------------------
<< jsp에서 자바문법을 완전히 걷어내기 >>

출력 		<%= %>					==> 표현언어
반복문, if 	for(), if()				==> jstl



<< 컨트롤러에서 request에 상태유지한 값 출력하기 >>
<%=request.getAttribute("msg")%>			<--- 표현식
${msg }										<--- 표현언어


<%@ %>		<--- 지시자
			<--- jsp를 동작하기 전에 선행 처리 되어야 할 내용를 써 줍니다.
			
-------------------------------------------------------------			

<c:forEach var="c" items="${list }">

ArrayList<CustomerVO> list = (ArrayList<CustomerVO>)request.getAttribute("list");
for(CustomerVO c:list){

}

-----------------------------------------------------

<td>${c.custid } </td>     

${c.custid}  <--- <%= c.getCustid() %> 









